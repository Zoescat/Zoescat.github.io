<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>张兮兮</title>
  
  <subtitle>好好学习,天天向上...</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://Zoescat.github.io/"/>
  <updated>2019-11-04T03:08:33.950Z</updated>
  <id>http://Zoescat.github.io/</id>
  
  <author>
    <name>Zoe 张兮兮</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript中,slice,splice和split三个函数的使用方法的总结</title>
    <link href="http://Zoescat.github.io/2019/10/22/javascript-zhong-slice-splice-he-split-san-ge-han-shu-de-shi-yong-fang-fa-de-zong-jie/"/>
    <id>http://Zoescat.github.io/2019/10/22/javascript-zhong-slice-splice-he-split-san-ge-han-shu-de-shi-yong-fang-fa-de-zong-jie/</id>
    <published>2019-10-22T13:19:26.000Z</published>
    <updated>2019-11-04T03:08:33.950Z</updated>
    
    <content type="html"><![CDATA[<h1 id="知识点总结"><a href="#知识点总结" class="headerlink" title="知识点总结"></a>知识点总结</h1><h3 id="1-slice-方法返回一个新的数组对象，这一对象是一个由-begin-和-end-决定的原数组的浅拷贝（包括-begin，不包括-end）。原始数组不会被改变。"><a href="#1-slice-方法返回一个新的数组对象，这一对象是一个由-begin-和-end-决定的原数组的浅拷贝（包括-begin，不包括-end）。原始数组不会被改变。" class="headerlink" title="1. slice() 方法返回一个新的数组对象，这一对象是一个由 begin 和 end 决定的原数组的浅拷贝（包括 begin，不包括 end）。原始数组不会被改变。"></a>1. slice() 方法返回一个新的数组对象，这一对象是一个由 begin 和 end 决定的原数组的浅拷贝（包括 begin，不包括 end）。原始数组不会被改变。</h3><h4 id="语法-array-slice-begin-end-第一个参数-begin-表示开始截取的索引-包含-第二个参数-end-表示结束截取的索引-不包含-end"><a href="#语法-array-slice-begin-end-第一个参数-begin-表示开始截取的索引-包含-第二个参数-end-表示结束截取的索引-不包含-end" class="headerlink" title="语法: array.slice(begin,end),第一个参数 begin 表示开始截取的索引(包含),第二个参数 end 表示结束截取的索引(不包含 end)"></a>语法: array.slice(begin,end),第一个参数 begin 表示开始截取的索引(包含),第二个参数 end 表示结束截取的索引(不包含 end)</h4><h4 id="比如-有这样一个数组"><a href="#比如-有这样一个数组" class="headerlink" title="比如,有这样一个数组:"></a>比如,有这样一个数组:</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token keyword">var</span> arr1 <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 输出[1,2,3]</span><span class="token keyword">var</span> arr2 <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//如果 end 被省略，则 slice 会一直提取到原数组末尾,输出[4,5,6]。</span><span class="token keyword">var</span> arr3 <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//如果只传入一个参数，且是负数时，length会与参数相加，然后再截取,输出[6]</span><span class="token keyword">var</span> arr4 <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//如果当传入两个参数一正一负时，length也会先于负数相加后，再截取,输出[3]</span><span class="token keyword">var</span> arr5 <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//如果只传入一个参数，是负数时,并且参数的绝对值大于数组length时，会截取整个数组,输出[1,2,3,4,5,6]</span><span class="token keyword">var</span> array <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//如果传入一个参数，大于length时，将返回一个空数组,输出[]</span></code></pre><h4 id="slice-不会修改原数组，只会返回一个浅复制了原数组中的元素的一个新数组。原数组的元素会按照下述规则拷贝："><a href="#slice-不会修改原数组，只会返回一个浅复制了原数组中的元素的一个新数组。原数组的元素会按照下述规则拷贝：" class="headerlink" title="slice 不会修改原数组，只会返回一个浅复制了原数组中的元素的一个新数组。原数组的元素会按照下述规则拷贝："></a>slice 不会修改原数组，只会返回一个浅复制了原数组中的元素的一个新数组。原数组的元素会按照下述规则拷贝：</h4><ul><li>如果该元素是个对象引用 （不是实际的对象），slice 会拷贝这个对象引用到新的数组里。两个对象引用都引用了同一个对象。如果被引用的对象发生改变，则新的和原来的数组中的这个元素也会发生改变。</li><li>对于字符串、数字及布尔值来说（不是 String、Number 或者 Boolean 对象），slice 会拷贝这些值到新的数组里。在别的数组里修改这些字符串或数字或是布尔值，将不会影响另一个数组。</li></ul><p>如果向两个数组任一中添加了新元素，则另一个不会受到影响。</p><h3 id="2-splice-方法通过删除或替换现有元素或者原地添加新的元素来修改数组-并以数组形式返回被修改的内容。此方法会改变原数组。"><a href="#2-splice-方法通过删除或替换现有元素或者原地添加新的元素来修改数组-并以数组形式返回被修改的内容。此方法会改变原数组。" class="headerlink" title="2. splice() 方法通过删除或替换现有元素或者原地添加新的元素来修改数组,并以数组形式返回被修改的内容。此方法会改变原数组。"></a>2. splice() 方法通过删除或替换现有元素或者原地添加新的元素来修改数组,并以数组形式返回被修改的内容。此方法会改变原数组。</h3><h4 id="语法-array-splice-start-deleteCount-item…-，参数-start-是从数组-array-中移除元素的开始位置。参数-deleteCount-是要移除的数组元素的个数-必须是整数，如果-deleteCount-是-0-或者负数，则不移除元素。如果有额外的参数，那么-item-会插入到被移除元素的位置上。"><a href="#语法-array-splice-start-deleteCount-item…-，参数-start-是从数组-array-中移除元素的开始位置。参数-deleteCount-是要移除的数组元素的个数-必须是整数，如果-deleteCount-是-0-或者负数，则不移除元素。如果有额外的参数，那么-item-会插入到被移除元素的位置上。" class="headerlink" title="语法: array.splice(start,deleteCount,item…)，参数 start 是从数组 array 中移除元素的开始位置。参数 deleteCount 是要移除的数组元素的个数,必须是整数，如果 deleteCount 是 0 或者负数，则不移除元素。如果有额外的参数，那么 item 会插入到被移除元素的位置上。"></a>语法: array.splice(start,deleteCount,item…)，参数 start 是从数组 array 中移除元素的开始位置。参数 deleteCount 是要移除的数组元素的个数,必须是整数，如果 deleteCount 是 0 或者负数，则不移除元素。如果有额外的参数，那么 item 会插入到被移除元素的位置上。</h4><h4 id="下面举例说明-spliced-的用法-同样先设置一个数组"><a href="#下面举例说明-spliced-的用法-同样先设置一个数组" class="headerlink" title="下面举例说明 spliced 的用法,同样先设置一个数组"></a>下面举例说明 spliced 的用法,同样先设置一个数组</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token keyword">var</span> b <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//这里表示从数组索引1开始移除元素,移除2个元素,在移除的位置分别插入'f' 和'g'，输出 a=[1,'f','g',4,5,6],b=[2,3]</span></code></pre><p>我们知道 delete 和 splice 都可以删除数组中的元素，但是它们是有区别的，例如有一个数组,这时我们想删除数组中的 b 元素 ：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token keyword">delete</span> arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 用 delete 删除,输出 [ 'a', &lt;1 empty item>, 'c', 'd' ],</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 用 splice 删除,输出 [ 'a', 'c', 'd' ]</span></code></pre><p>可见,用 delete 删除的时候,其他元素的键值是不变的,被删除的位置会用 &lt;1 empty item&gt; 表示</p><h3 id="3-split-方法使用指定的分隔符字符串将一个-String-对象分割成子字符串数组，以一个指定的分割字串来决定每个拆分的位置。"><a href="#3-split-方法使用指定的分隔符字符串将一个-String-对象分割成子字符串数组，以一个指定的分割字串来决定每个拆分的位置。" class="headerlink" title="3. split() 方法使用指定的分隔符字符串将一个 String 对象分割成子字符串数组，以一个指定的分割字串来决定每个拆分的位置。"></a>3. split() 方法使用指定的分隔符字符串将一个 String 对象分割成子字符串数组，以一个指定的分割字串来决定每个拆分的位置。</h3><h4 id="语法-string-split-separator-limit-，split-方法把这个-string-分割成片段来创建一个字符串数组。可选参数-limit-可以限制被分割的片段数量。separator-参数可以是一个字符串或一个正则表达式-下面我们从一些简单例子中去理解-split-的用法"><a href="#语法-string-split-separator-limit-，split-方法把这个-string-分割成片段来创建一个字符串数组。可选参数-limit-可以限制被分割的片段数量。separator-参数可以是一个字符串或一个正则表达式-下面我们从一些简单例子中去理解-split-的用法" class="headerlink" title="语法: string.split(separator,limit)，split 方法把这个 string 分割成片段来创建一个字符串数组。可选参数 limit 可以限制被分割的片段数量。separator 参数可以是一个字符串或一个正则表达式,下面我们从一些简单例子中去理解 split 的用法"></a>语法: string.split(separator,limit)，split 方法把这个 string 分割成片段来创建一个字符串数组。可选参数 limit 可以限制被分割的片段数量。separator 参数可以是一个字符串或一个正则表达式,下面我们从一些简单例子中去理解 split 的用法</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'The quick brown fox jumps over the lazy dog.'</span><span class="token keyword">var</span> words <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 输出: fox</span><span class="token keyword">var</span> chars <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 输出: k</span><span class="token keyword">var</span> strCopy <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>strCopy<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 输出: Array ['The quick brown fox jumps over the lazy dog.']</span><span class="token comment" spellcheck="true">// 再比如:</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'0123456'</span><span class="token keyword">var</span> b <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 输出: b=[ '0', '1', '2' ]</span></code></pre><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split" target="_blank" rel="noopener">想了解更多关于 split 的用法,可以查看 MDN 官方文档,请点此链接^_^</a></p><h3 id="明天又是充满希望的一天-继续加油-O-∩-∩-O"><a href="#明天又是充满希望的一天-继续加油-O-∩-∩-O" class="headerlink" title="明天又是充满希望的一天,继续加油 O(∩_∩)O"></a>明天又是充满希望的一天,继续加油 O(∩_∩)O</h3><p><img src="https://user-gold-cdn.xitu.io/2019/10/20/16de8c77ffe1a169?w=640&h=640&f=jpeg&s=51264" alt="喵"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;知识点总结&quot;&gt;&lt;a href=&quot;#知识点总结&quot; class=&quot;headerlink&quot; title=&quot;知识点总结&quot;&gt;&lt;/a&gt;知识点总结&lt;/h1&gt;&lt;h3 id=&quot;1-slice-方法返回一个新的数组对象，这一对象是一个由-begin-和-end-决定的原数组的浅拷贝（
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://Zoescat.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://Zoescat.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Vue 生命周期的简单总结</title>
    <link href="http://Zoescat.github.io/2019/10/18/vue/"/>
    <id>http://Zoescat.github.io/2019/10/18/vue/</id>
    <published>2019-10-18T14:19:26.000Z</published>
    <updated>2019-11-04T03:08:44.244Z</updated>
    
    <content type="html"><![CDATA[<h1 id="知识点总结"><a href="#知识点总结" class="headerlink" title="知识点总结"></a>知识点总结</h1><h4 id="Vue-的生命周期是指从创建–-gt-挂载–-gt-更新–-gt-销毁的过程-简单地说-一个组件从开始创建到最后销毁所经历的各种状态-就是一个组件的生命周期。首先，官方文档对于-Vue-生命周期的图解一定要仔细研究一波，请看官方图解-O-∩-∩-O"><a href="#Vue-的生命周期是指从创建–-gt-挂载–-gt-更新–-gt-销毁的过程-简单地说-一个组件从开始创建到最后销毁所经历的各种状态-就是一个组件的生命周期。首先，官方文档对于-Vue-生命周期的图解一定要仔细研究一波，请看官方图解-O-∩-∩-O" class="headerlink" title="Vue 的生命周期是指从创建–&gt;挂载–&gt;更新–&gt;销毁的过程,简单地说,一个组件从开始创建到最后销毁所经历的各种状态,就是一个组件的生命周期。首先，官方文档对于 Vue 生命周期的图解一定要仔细研究一波，请看官方图解 O(∩_∩)O"></a>Vue 的生命周期是指从创建–&gt;挂载–&gt;更新–&gt;销毁的过程,简单地说,一个组件从开始创建到最后销毁所经历的各种状态,就是一个组件的生命周期。首先，官方文档对于 Vue 生命周期的图解一定要仔细研究一波，请看官方图解 O(∩_∩)O</h4><p><img src="https://user-gold-cdn.xitu.io/2019/10/17/16dd65629d1bca31?w=1200&h=3039&f=png&s=77677" alt="Vue生命周期图示"></p><h3 id="从图示可以看到，Vue-的生命周期实际上分为八个步骤，分别是-beforeCreate，created，beforeMount，Mounted，beforeUpdate-updated-beforeDestroy-destroyed。下面对每个阶段进行简单的分析"><a href="#从图示可以看到，Vue-的生命周期实际上分为八个步骤，分别是-beforeCreate，created，beforeMount，Mounted，beforeUpdate-updated-beforeDestroy-destroyed。下面对每个阶段进行简单的分析" class="headerlink" title="从图示可以看到，Vue 的生命周期实际上分为八个步骤，分别是 beforeCreate，created，beforeMount，Mounted，beforeUpdate,updated,beforeDestroy,destroyed。下面对每个阶段进行简单的分析."></a>从图示可以看到，Vue 的生命周期实际上分为八个步骤，分别是 beforeCreate，created，beforeMount，Mounted，beforeUpdate,updated,beforeDestroy,destroyed。下面对每个阶段进行简单的分析.</h3><ul><li>beforeCreate 阶段，发生在实例初始化之后，数据观测（data observer)和 event/watcher 事件配置之前，此时无法获取 data 中的数据和 methods 中的方法</li><li>created 阶段，在实例已经创建完成之后被调用，这里数据观测，属性和方法的运算都已经被配置，Vue 实例的数据对象 data 有了，$el 还没有。使用场景：发送请求获取数据</li><li>beforeMount，在 Vue 实例挂载之前被调用</li><li>在 Mounted 阶段，此时 Vue 实例已经挂载到页面中，可以获取到 el 中的 DOM 元素，进行 DOM 操作</li><li>beforeUpdate 阶段，数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前，这时候可以在这个阶段进一步地更改状态这不会出发附加的重渲染过程</li><li>updated 阶段，组件 DOM 已经更新，此时可以执行依赖于 DOM 的操作</li><li>beforeDestory，在 Vue 实例销毁之前被调用，在这一步，实例完全可用。使用场景：实例销毁之前，执行清理任务，比如定时器的消除等</li><li>destroyed，在 Vue 实例销毁之后调用，调用后，Vue 实例指示的所有东西都会解绑，，所有的事件监听器会被移除，所有的子实例也会被销毁，但 DOM 结构任然存在</li></ul><h3 id="今天又是充满希望的一天，继续加油-￣-▽-￣-”"><a href="#今天又是充满希望的一天，继续加油-￣-▽-￣-”" class="headerlink" title="今天又是充满希望的一天，继续加油(￣ ▽ ￣)”"></a>今天又是充满希望的一天，继续加油(￣ ▽ ￣)”</h3><p><img src="https://user-gold-cdn.xitu.io/2019/10/20/16de8c77ffe1a169?w=640&h=640&f=jpeg&s=51264" alt="日常吸猫"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;知识点总结&quot;&gt;&lt;a href=&quot;#知识点总结&quot; class=&quot;headerlink&quot; title=&quot;知识点总结&quot;&gt;&lt;/a&gt;知识点总结&lt;/h1&gt;&lt;h4 id=&quot;Vue-的生命周期是指从创建–-gt-挂载–-gt-更新–-gt-销毁的过程-简单地说-一个组件从开始创建
      
    
    </summary>
    
    
      <category term="Vue.js" scheme="http://Zoescat.github.io/categories/Vue-js/"/>
    
    
      <category term="Vue.js" scheme="http://Zoescat.github.io/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>first arcitle</title>
    <link href="http://Zoescat.github.io/2019/09/05/first-arcitle/"/>
    <id>http://Zoescat.github.io/2019/09/05/first-arcitle/</id>
    <published>2019-09-05T02:19:26.000Z</published>
    <updated>2019-11-04T03:08:58.661Z</updated>
    
    <content type="html"><![CDATA[<h1 id="日常"><a href="#日常" class="headerlink" title="日常"></a>日常</h1><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hello 小可爱!'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;日常&quot;&gt;&lt;a href=&quot;#日常&quot; class=&quot;headerlink&quot; title=&quot;日常&quot;&gt;&lt;/a&gt;日常&lt;/h1&gt;&lt;pre class=&quot; language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token ke
      
    
    </summary>
    
    
      <category term="日常" scheme="http://Zoescat.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="笔记" scheme="http://Zoescat.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
